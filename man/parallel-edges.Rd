% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/edg-parallel.R
\name{edg_any_parallel}
\alias{edg_any_parallel}
\alias{edg_sum_parallel}
\alias{edg_count_parallel}
\alias{edg_count_parallel_df}
\title{Parallel Edges Queries}
\usage{
edg_any_parallel(x)

edg_sum_parallel(x)

edg_count_parallel(x)

edg_count_parallel_df(x, ...)
}
\arguments{
\item{x}{A graph object.}

\item{...}{Arguments passed on to other methods. See below.}
}
\value{
A \code{logical} or \code{numeric} scalar.
}
\description{
Parallel Edges Queries
}
\details{
\code{edg_any_parallel()} checks whether \code{x} contains parallel edges and returns a
\code{logical} scalar. \cr
\itemize{
\item In directed graphs, edges are considered parallel if they share the same source and target.
\item In undirected graphs, edges are considered parallel if they share the same two vertices.
\item \code{edg_any_parallel()} differs from \code{\link[network:is.multiplex]{network::is.multiplex()}}, which checks if a
\code{network::network} is \emph{allowed} to contain \emph{multiplex} edges, not whether any parallel
edges exist.
}

\code{edg_sum_parallel()} counts the \emph{total} number of parallel edges and returns an \code{integer} scalar. \cr

\code{edg_count_parallel()} counts the number of parallel edges for \emph{each edge} and
returns an \code{integer} \code{vector}. \cr
\itemize{
\item \code{edg_count_parallel()} differs from \code{\link[igraph:count_multiple]{igraph::count_multiple()}}, which returns fractions
for loops.
}

\itemize{
\item \code{edg_count_parallel_df} is a convenience wrapper around \code{edg_count_parallel()} and
\code{edg_get_attrs_df()} that returns a \code{data.frame}.
\itemize{
\item \code{stringsAsFactors} is \emph{always} \code{FALSE}.
\item If available, \code{\link[tibble:as_tibble]{tibble::as_tibble()}} is called to return a \code{tbl_df} instead.
}
}
}
\examples{
library(snatools)

data("USairports", package = "igraphdata")
(ig <- USairports)

data("sampson", package = "ergm")
(nw <- samplike)

edg_any_parallel(ig)
edg_any_parallel(nw)

nw_undirected <- network::network.copy(nw)
network::set.network.attribute(nw_undirected, "directed", FALSE)

network::is.multiplex(nw_undirected)
edg_any_parallel(nw_undirected)

edg_sum_parallel(ig)
length(which(igraph::which_multiple(ig)))

edg_sum_parallel(nw_undirected)

edg_count_parallel(ig) \%>\% head(10)
edg_count_parallel(nw) \%>\% head(10)

edg_count_parallel_df(USairports)
edg_count_parallel_df(nw)

}
\seealso{
\code{\link[igraph:any_multiple]{igraph::any_multiple()}}, \code{\link[network:is.multiplex]{network::is.multiplex()}}

\code{\link[igraph:count_multiple]{igraph::count_multiple()}}, \code{\link[igraph:which_multiple]{igraph::which_multiple()}}

\code{\link[igraph:count_multiple]{igraph::count_multiple()}}
}
\author{
Brendan Knapp \email{brendan.g.knapp@gmail.com}
}
