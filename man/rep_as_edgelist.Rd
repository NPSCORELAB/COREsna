% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/edgelist.R
\name{rep_as_edgelist}
\alias{rep_as_edgelist}
\alias{rep_as_edgelist.default}
\alias{rep_as_edgelist.adj_matrix}
\alias{is_edgelist}
\alias{print.edgelist}
\alias{as.matrix.edgelist}
\alias{as.data.frame.edgelist}
\title{Construct a graph object's edgelist representation}
\usage{
rep_as_edgelist(x, ...)

\method{rep_as_edgelist}{default}(x, use_names = TRUE, vrt_attr = NULL,
  weights = FALSE, leave_raw = FALSE, ignore_missing_names = TRUE)

\method{rep_as_edgelist}{adj_matrix}(x, use_vrt_attr = TRUE,
  weights = FALSE, leave_raw = FALSE)

is_edgelist(x)

\method{print}{edgelist}(x, .nrow = 10L)

\method{as.matrix}{edgelist}(x, ...)

\method{as.data.frame}{edgelist}(x, ...)
}
\arguments{
\item{x}{An \code{bridge_net}, \code{igraph}, \code{network}, \code{tbl_graph}, or \code{edgelist} object.}

\item{...}{Arguments passed on to \code{as.data.frame()}.}

\item{use_names}{\code{logical} (default: \code{TRUE}) indicating whether to use vertex names in
the returned object. If \code{FALSE}, the returned object uses vertex indices.}

\item{vrt_attr}{\code{character} (default: \code{NULL}) indicating which vertex attribute to use
in the returned object. If provided, \code{vrt_attr} overrides \code{use_names}.}

\item{weights}{\code{logical} (default: \code{FALSE}) indicating whether the parallel edges of
multiplex graph objects should be combined into a count column named \code{.weight}.}

\item{leave_raw}{\code{logical} (default: \code{FALSE}) indicating whether to return a \code{matrix}
(or \code{data.frame}) instead of an \code{edgelist} object.}

\item{ignore_missing_names}{\code{logical} (default: \code{TRUE}) whether to throw a warning if
\code{use_names = TRUE} but  \code{x} does not contain valid vertex names.}

\item{.nrow}{Maximum number of rows to print.}
}
\value{
\code{edgelist} object, \code{matrix}, or \code{data.frame}.
}
\description{
\code{rep_as_edgelist()} standardizes edgelist representations across supported classes in
that edge sources (\code{.ego}) and targets (\code{.alter}) are sorted row-wise for undirected
graphs and parallel edges are never dropped from multiplex graphs.
}
\details{
The returned object contains minimally 2 columns (\code{.ego} and \code{.alter}) stored as a
\code{matrix}.
\itemize{
\item \code{use_names}
\itemize{
\item If \code{use_names} is \code{TRUE} (the default), \code{rep_as_edgelist()} checks whether \code{x}
contains a valid vertex attribute for vertex names. If available, this attribute is
used. If not available, the returned object uses vertex indices and a warning is
thrown (unless \code{ignore_missing_names = TRUE}).
\item Each class uses a different attribute for valid vertex names:
\itemize{
\item \code{igraph} and \code{tbl_graph} objects use a vertex attribute called \code{name}
\item \code{network} objects use a vertex attribute called \code{vertex.names}
\item \code{bridge_net} objects use a vertex attribute called \code{.name}
}
}
\item \code{weights}
\itemize{
\item If \code{weights} is \code{TRUE}, \code{rep_as_edgelist()} combines parallel edges to create a
third column (\code{.weight}).
\itemize{
\item In order to handle potentially heterogeneous data types, \code{rep_as_edgelist()}
stores edges in a \code{data.frame} instead of a \code{matrix}.
}
\item Ignored if \code{net_is_multiplex()} returns \code{FALSE}.
}
\item \code{leave_raw}
\itemize{
\item If \code{leave_raw} is \code{FALSE} (the default), \code{rep_as_edgelist()} will return an
\code{edgelist} object.
\item \code{edgelist} objects store metadata describing \code{x} in order to facilitate operations
for which a traditional edgelist requires extra information.
\itemize{
\item These metadata are stored in the following \code{attributes()}:
\itemize{
\item \code{is_directed}
\item \code{is_bipartite}
\item \code{is_multiplex}
\item \code{n_vertices}
\item \code{n_edges}
\item \code{n_actors}
}
}
}
}
\itemize{
\item If desired, an \code{edgelist} object can be converted using \code{as.data.frame()} or
\code{as.matrix()} in order to strip additional \code{attributes()}.
}
}
\examples{
library(snatools)

ig <- igraph::random.graph.game(10, 0.1) \%>\% 
  igraph::set_vertex_attr("name", value = letters[seq_len(igraph::vcount(.))]) \%>\% 
  igraph::set_vertex_attr("group", value = sample(LETTERS[1:3], igraph::vcount(.), replace = TRUE))

nw <- ig \%>\% 
  as_network()
  
sna_g <- ig \%>\% 
  as_bridge_net()
  
tidy_g <- ig \%>\% 
  tidygraph::as_tbl_graph()

ig \%>\% rep_as_edgelist()

nw \%>\% rep_as_edgelist(use_names = FALSE)

tidy_g \%>\% rep_as_edgelist(vrt_attr = "group")

ig \%>\% rep_as_edgelist(leave_raw = TRUE)

}
\seealso{
\code{\link[igraph:as_edgelist]{igraph::as_edgelist()}}, \code{\link[network:as.matrix.network.edgelist]{network::as.matrix.network.edgelist()}}
}
\author{
Brendan Knapp \email{brendan.g.knapp@gmail.com}
}
