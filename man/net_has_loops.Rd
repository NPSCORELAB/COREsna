% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/network-metadata.R
\name{net_has_loops}
\alias{net_has_loops}
\alias{net_has_loops.bridge_net}
\alias{net_has_loops.igraph}
\alias{net_has_loops.network}
\alias{net_has_loops.tbl_graph}
\alias{net_has_loops.edgelist}
\alias{net_has_loops.adj_matrix}
\title{Does a graph object contain loops?}
\usage{
net_has_loops(x)

\method{net_has_loops}{bridge_net}(x)

\method{net_has_loops}{igraph}(x)

\method{net_has_loops}{network}(x)

\method{net_has_loops}{tbl_graph}(x)

\method{net_has_loops}{edgelist}(x)

\method{net_has_loops}{adj_matrix}(x)
}
\arguments{
\item{x}{An \code{bridge_net}, \code{igraph}, \code{network}, \code{tbl_graph}, or \code{edgelist} object.}
}
\value{
\code{logical} indicating whether \code{x} contains loop edges.
}
\description{
Test whether the \code{.ego} (source) and \code{.alter} (target) of any edge is the same vertex.
}
\details{
\code{net_has_loops()} differs from \code{network::has.loops()} in that it checks whether loops
actually exist, rather than whether loops are allowed.
}
\examples{
library(snatools)

ig <- c(1, 2,
        2, 3,
        1, 3,
        4, 1,
        1, 4,
        2, 2) \%>\% 
 matrix(ncol = 2, byrow = TRUE) \%>\% 
 igraph::graph_from_edgelist(directed = FALSE)

nw <- ig \%>\% 
  as_network()
  
bridge_g <- ig \%>\% 
  as_bridge_net()
  
tidy_g <- ig \%>\% 
  tidygraph::as_tbl_graph()
  
el <- ig \%>\% 
  rep_as_edgelist(use_names = FALSE)
  
adj_mat <- ig \%>\% 
  rep_as_adj_matrix()

net_has_loops(bridge_g)

net_has_loops(ig)

net_has_loops(nw)

net_has_loops(tidy_g)

net_has_loops(el)

net_has_loops(el)

}
\seealso{
\code{\link[igraph:which_loop]{igraph::which_loop()}}

\code{\link[network:has.loops]{network::has.loops()}}

\code{\link[tidygraph:edge_is_loop]{tidygraph::edge_is_loop()}}
}
\author{
Brendan Knapp \email{brendan.g.knapp@gmail.com}
}
